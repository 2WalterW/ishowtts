#!/usr/bin/env bash
set -euo pipefail

if [[ ${EUID} -ne 0 ]]; then
  exec sudo -E SSH_PROXY_TARGET_USER="${SSH_PROXY_TARGET_USER:-$USER}" "$0" "$@"
fi

TARGET_USER=${SSH_PROXY_TARGET_USER:-${SUDO_USER:-$USER}}
TARGET_HOME="$(getent passwd "$TARGET_USER" | cut -d: -f6)"
if [[ -z "$TARGET_HOME" ]]; then
  echo "error: unable to determine home directory for user '$TARGET_USER'" >&2
  exit 1
fi

CONFIG_DIR="${TARGET_HOME}/.ssh"
CONFIG_FILE="${CONFIG_DIR}/config"
COMMAND_SCRIPT="${CONFIG_DIR}/clash_proxy_command.sh"
BLOCK_BEGIN="# >>> Clash SSH Proxy >>>"
BLOCK_END="# <<< Clash SSH Proxy <<<"
LEGACY_BEGIN="# >>> iShowTTS Clash SSH Proxy >>>"
LEGACY_END="# <<< iShowTTS Clash SSH Proxy <<<"

PROXY_SCHEME=${CLASH_PROXY_SCHEME:-http}
PROXY_HOST=${CLASH_PROXY_HOST:-127.0.0.1}
PROXY_PORT=${CLASH_PROXY_PORT:-7897}
PROXY_URL="${PROXY_SCHEME}://${PROXY_HOST}:${PROXY_PORT}"

APT_PROXY_FILE="/etc/apt/apt.conf.d/99clash-proxy"
PROFILE_SNIPPET="/etc/profile.d/clash-proxy.sh"
NO_PROXY_DEFAULT="localhost,127.0.0.1,::1,ip6-localhost,*.local,*.localdomain,10.*,192.168.*,172.16.*,172.17.*,172.18.*,172.19.*,172.2*,172.30.*,172.31.*,169.254.*,fc*,fd*,fe80::*"

require_root() {
  if [[ "${EUID}" -ne 0 ]]; then
    echo "error: this action requires root privileges." >&2
    exit 1
  fi
}

set_owner_perms() {
  local path="$1"
  chown "$TARGET_USER":"$TARGET_USER" "$path"
}

ensure_ssh_dirs() {
  mkdir -p "$CONFIG_DIR"
  chmod 700 "$CONFIG_DIR"
  set_owner_perms "$CONFIG_DIR"
  if [[ ! -f "$CONFIG_FILE" ]]; then
    umask 177
    sudo -u "$TARGET_USER" touch "$CONFIG_FILE"
  fi
  chmod 600 "$CONFIG_FILE"
  set_owner_perms "$CONFIG_FILE"
}

remove_block() {
  if [[ -f "$CONFIG_FILE" ]]; then
    awk -v begin="$BLOCK_BEGIN" -v end="$BLOCK_END" -v lbegin="$LEGACY_BEGIN" -v lend="$LEGACY_END" '
      $0 == begin {skip=1; next}
      $0 == end {skip=0; next}
      $0 == lbegin {skip=1; next}
      $0 == lend {skip=0; next}
      skip != 1 {print}
    ' "$CONFIG_FILE" >"${CONFIG_FILE}.tmp"
    mv "${CONFIG_FILE}.tmp" "$CONFIG_FILE"
  fi
}

write_command_script() {
  umask 177
  cat <<'__PROXY_CMD__' > "$COMMAND_SCRIPT"
#!/usr/bin/env bash
set -euo pipefail

HOST="${1:-}"
PORT="${2:-}"

if [[ -z "$HOST" || -z "$PORT" ]]; then
  echo "Usage: $0 host port" >&2
  exit 1
fi

HOST_LC="${HOST,,}"
PROXY_HOST="${CLASH_SOCKS_HOST:-127.0.0.1}"
PROXY_PORT="${CLASH_SOCKS_PORT:-7897}"
DIRECT_TIMEOUT="${SSH_PROXY_DIRECT_TIMEOUT:-10}"
NO_PROXY_LIST="${SSH_PROXY_NO_PROXY:-localhost,127.0.0.1,::1,ip6-localhost,*.local,*.localdomain,10.*,192.168.*,172.16.*,172.17.*,172.18.*,172.19.*,172.2*,172.30.*,172.31.*,169.254.*,fc*,fd*,fe80::*}"

should_bypass=false
IFS=',' read -ra patterns <<< "$NO_PROXY_LIST"
for raw_pattern in "${patterns[@]}"; do
  pattern="${raw_pattern// /}"
  [[ -z "$pattern" ]] && continue
  pattern="${pattern,,}"
  if [[ "$HOST_LC" == $pattern ]]; then
    should_bypass=true
    break
  fi
  if [[ "$pattern" == *".*" ]]; then
    prefix="${pattern%.*}"
    if [[ "$HOST_LC" == $prefix* ]]; then
      should_bypass=true
      break
    fi
  fi
  if [[ "$pattern" == *'*' ]]; then
    prefix="${pattern%*}"
    if [[ "$HOST_LC" == $prefix* ]]; then
      should_bypass=true
      break
    fi
  fi
done

connect_direct() {
  if command -v ncat >/dev/null 2>&1; then
    exec ncat --connect-timeout "$DIRECT_TIMEOUT" "$HOST" "$PORT"
  elif command -v nc >/dev/null 2>&1; then
    exec nc -w "$DIRECT_TIMEOUT" "$HOST" "$PORT"
  else
    echo "No netcat/ncat available for direct SSH connection" >&2
    exit 1
  fi
}

connect_via_proxy() {
  if command -v ncat >/dev/null 2>&1; then
    exec ncat --proxy "${PROXY_HOST}:${PROXY_PORT}" --proxy-type socks5 "$HOST" "$PORT"
  elif command -v nc >/dev/null 2>&1; then
    exec nc -X 5 -x "${PROXY_HOST}:${PROXY_PORT}" "$HOST" "$PORT"
  else
    echo "Install ncat (nmap) or netcat-openbsd for SOCKS proxy support" >&2
    exit 1
  fi
}

if [[ "$should_bypass" == true ]]; then
  connect_direct
else
  connect_via_proxy
fi
__PROXY_CMD__
  chmod 700 "$COMMAND_SCRIPT"
  set_owner_perms "$COMMAND_SCRIPT"
}

write_ssh_block() {
  remove_block
  cat <<__SSH_BLOCK__ >> "$CONFIG_FILE"
$BLOCK_BEGIN
Host *
    ProxyCommand "$COMMAND_SCRIPT" %h %p
$BLOCK_END
__SSH_BLOCK__
  set_owner_perms "$CONFIG_FILE"
}

remove_ssh_artifacts() {
  remove_block
  rm -f "$COMMAND_SCRIPT"
}

write_apt_proxy() {
  require_root
  cat <<__APT__ | tee "$APT_PROXY_FILE" >/dev/null
Acquire::http::Proxy "$PROXY_URL";
Acquire::https::Proxy "$PROXY_URL";
__APT__
}

remove_apt_proxy() {
  require_root
  rm -f "$APT_PROXY_FILE"
}

write_profile_snippet() {
  require_root
  cat <<__PROFILE__ | tee "$PROFILE_SNIPPET" >/dev/null
# Auto-generated by ssh_clash_proxy_toggle.sh
export http_proxy="$PROXY_URL"
export https_proxy="$PROXY_URL"
export HTTP_PROXY="$PROXY_URL"
export HTTPS_PROXY="$PROXY_URL"
export all_proxy="$PROXY_URL"
export ALL_PROXY="$PROXY_URL"
export SOCKS5_PROXY="${CLASH_SOCKS_HOST:-$PROXY_HOST}:${CLASH_SOCKS_PORT:-$PROXY_PORT}"
export NO_PROXY="${SSH_PROXY_NO_PROXY:-$NO_PROXY_DEFAULT}"
export no_proxy="${SSH_PROXY_NO_PROXY:-$NO_PROXY_DEFAULT}"
__PROFILE__
}

remove_profile_snippet() {
  require_root
  rm -f "$PROFILE_SNIPPET"
}

reexec_parent_shell() {
  [[ -t 0 ]] || return
  local parent
  parent=$(ps -o ppid= -p $$ | tr -d ' ')
  [[ -n "$parent" ]] || return
  local tty
  tty=$(readlink "/proc/${parent}/fd/0" 2>/dev/null) || return
  local cmd="$1"
  [[ -n "$cmd" ]] || return

  if ! command -v python3 >/dev/null 2>&1; then
    return
  fi


  python3 - "$tty" "$cmd" <<'PY'
import fcntl, termios, sys, os
tty_path, command = sys.argv[1:3]
try:
    fd = os.open(tty_path, os.O_WRONLY)
except OSError:
    sys.exit(0)
for ch in command + "\n":
    try:
        fcntl.ioctl(fd, termios.TIOCSTI, ch)
    except OSError:
        break
os.close(fd)
PY
}

enable() {
  ensure_ssh_dirs
  write_command_script
  write_ssh_block
  write_apt_proxy
  write_profile_snippet
  cat <<__MSG__
SSH ProxyCommand 已写入: $CONFIG_FILE
APT 代理配置: $APT_PROXY_FILE
系统环境导出: $PROFILE_SNIPPET
代理地址: $PROXY_URL
配置用户: $TARGET_USER (home: $TARGET_HOME)
__MSG__
  local target_shell
  target_shell="$(getent passwd "$TARGET_USER" | cut -d: -f7)"
  [[ -n "$target_shell" && -x "$target_shell" ]] || target_shell="/bin/bash"
  reexec_parent_shell "exec $target_shell --login"
}

disable() {
  remove_ssh_artifacts
  remove_apt_proxy || true
  remove_profile_snippet || true
  cat <<__MSG__
已移除 SSH ProxyCommand、APT 配置与系统环境导出。
__MSG__
  local target_shell
  target_shell="$(getent passwd "$TARGET_USER" | cut -d: -f7)"
  [[ -n "$target_shell" && -x "$target_shell" ]] || target_shell="/bin/bash"
  reexec_parent_shell "exec $target_shell --login"
}

status() {
  echo "SSH proxy: $(if grep -Fq \"$BLOCK_BEGIN\" \"$CONFIG_FILE\" 2>/dev/null; then echo ON; else echo OFF; fi)"
  echo "APT proxy file: $(if [[ -f $APT_PROXY_FILE ]]; then echo present; else echo missing; fi)"
  echo "Profile snippet: $(if [[ -f $PROFILE_SNIPPET ]]; then echo present; else echo missing; fi)"
  echo "Proxy endpoint: $PROXY_URL"
}

case "${1:-status}" in
  on|enable)
    enable
    ;;
  off|disable)
    disable
    ;;
  status)
    status
    ;;
  -h|--help|help)
    cat <<'USAGE'
Usage: ssh_clash_proxy_toggle.sh [on|off|status]

on/off  配置或移除 SSH ProxyCommand，并写入系统级 HTTP(S) 代理设置
status  查看当前配置状态

可覆盖的环境变量:
  CLASH_PROXY_SCHEME (默认 http)
  CLASH_PROXY_HOST   (默认 127.0.0.1)
  CLASH_PROXY_PORT   (默认 7897)
  SSH_PROXY_NO_PROXY (逗号分隔的 bypass 列表)
USAGE
    ;;
  *)
    echo "Unknown option: ${1:-}" >&2
    exit 2
    ;;
esac
